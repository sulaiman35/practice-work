stages:
  - terraform-deploy
  - verify
  - terraform-destroy  # Only run if verification succeeds

variables:
  AZURE_CLIENT_ID: $AZURE_CLIENT_ID  # Service principal client ID (protected variable)
  AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET  # Service principal secret (protected variable)
  AZURE_TENANT_ID: $AZURE_TENANT_ID  # Azure tenant ID (protected variable)
  AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID  # Azure subscription ID (protected variable)
  AZURE_URL: "https://dev-test-default.azurewebsites.net/"

image: zenika/terraform-azure-cli:latest # Terraform image with Azure provider

before_script:
  - cd azure-terraform
  - terraform init
  ## Login using service principal credentials (Recommended)
  - az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID
  ## Set subscription (optional)
  - az account set -s $AZURE_SUBSCRIPTION_ID

terraform-deploy:
  stage: terraform-deploy
  script:
    - terraform validate  # Validate Terraform configuration
    - terraform plan -out=plan.out -var-file="tfvars.example"  # Generate a plan
    - echo "Terraform plan:"
    - cat plan.out  # Show the generated plan for review (optional)
    - terraform apply -auto-approve plan.out  # Apply the plan if approved

verify:
  stage: verify
  script:
    - sleep 60  # Wait for service to spin up (adjust based on deployment time)
    - curl -sSL -o /dev/null $AZURE_URL  # Check for successful response
    - test $? -eq 0  # Check if curl exit code is 0 (success)

  only:
    - succeeded  # Only run verification if terraform-deploy succeeds

destroy:
  stage: destroy
  script:
    - terraform destroy -force  -var-file="tfvars.example"  # Destroy resources

  only:
    - succeeded  # Only run destroy if verification succeeds